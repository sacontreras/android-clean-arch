apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    def appPropsFile = file('./src/main/assets/application.properties')
    Properties appProps = new Properties()
    String locationweatherws_api_key
    if (!appPropsFile.canRead())
        throw new GradleException("Could not read weatherLocApp.properties! This file is required as it provides values to the weatherLocApp which are necessary at runtime.")
    appProps.load(new FileInputStream(appPropsFile))
    locationweatherws_api_key = appProps['lws.apikey']
    if (locationweatherws_api_key == null || locationweatherws_api_key.trim().isEmpty() || locationweatherws_api_key.compareTo("YOUR_LOCATION_WEATHER_SERVICE_API_KEY") == 0)
        throw new GradleException(String.format("failed read: %s 'lws.apikey' not set", appPropsFile.getCanonicalPath()))

    defaultConfig {
        applicationId "com.codingexercise.verve.stevencontreras.weatherlocationapp"
        minSdkVersion 23
        targetSdkVersion 28
        multiDexEnabled true
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$versions.kotlin"
    implementation "com.android.support:appcompat-v7:$versions.support"
    implementation "com.android.support:design:$versions.support"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    //dagger2 - dependency injection
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    implementation "com.google.dagger:dagger-android:$versions.dagger"
    implementation "com.google.dagger:dagger-android-support:$versions.dagger"
    kapt "com.google.dagger:dagger-android-processor:$versions.dagger"

    //rx (reactive - observable streams)
    implementation "io.reactivex.rxjava2:rxjava:$versions.rxjava"
    implementation "io.reactivex.rxjava2:rxandroid:$versions.rxandroid"
    implementation "io.reactivex.rxjava2:rxkotlin:$versions.rxkotlin"

    //architecture - see https://developer.android.com/jetpack (Architecture)
    implementation "android.arch.lifecycle:runtime:$versions.andro_arch"
    kapt "android.arch.lifecycle:compiler:$versions.andro_arch"
    implementation "android.arch.lifecycle:common-java8:$versions.andro_arch"
    implementation "android.arch.lifecycle:extensions:$versions.andro_arch"
    implementation "android.arch.lifecycle:reactivestreams:$versions.andro_arch"

    //ORM - specific to Android sqlite - similar to spring-data-jpa
    implementation "android.arch.persistence.room:runtime:$versions.andro_arch"
    implementation "android.arch.persistence.room:rxjava2:$versions.andro_arch"
    implementation "android.arch.paging:runtime:$versions.paging"
    kapt "android.arch.persistence.room:compiler:$versions.andro_arch"

    // https://mvnrepository.com/artifact/org.modelmapper/modelmapper
    implementation "org.modelmapper:modelmapper:$versions.modelmapper"

    //anko - butterknife-like features plus a whole lot more (for kotlin) - see https://www.kotlinresources.com/library/anko/
    implementation "org.jetbrains.anko:anko-commons:$versions.anko"

    //RecyclerView (mem optimized listview)
    implementation "com.android.support:cardview-v7:$versions.support"
    implementation "com.android.support:recyclerview-v7:$versions.support"
    implementation "com.squareup.picasso:picasso:$versions.picasso"
    implementation "com.android.support:design:$versions.support"

    //google maps
    implementation "com.google.android.gms:play-services-maps:$versions.googlemaps"

    //retrofit - restful api client made easy!
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofit"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.10.0'
    testImplementation "android.arch.core:core-testing:$versions.andro_arch"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //kaptTest and kaptAndroidTest enables annotation processors for androidTest - in order for us to use dagger DI therein
    kaptTest "com.google.dagger:dagger-compiler:$versions.dagger"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$versions.dagger"
}
